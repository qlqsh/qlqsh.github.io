<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刘明个人博客]]></title>
  <link href="http://qlqsh.github.io/atom.xml" rel="self"/>
  <link href="http://qlqsh.github.io/"/>
  <updated>2015-09-12T00:15:53+08:00</updated>
  <id>http://qlqsh.github.io/</id>
  <author>
    <name><![CDATA[刘明]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git 备忘]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/12/git-bei-wang/"/>
    <updated>2015-09-12T00:08:13+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/12/git-bei-wang</id>
    <content type="html"><![CDATA[<h2>Git配置</h2>

<pre><code>git config --global user.name "qlqsh"
git config --global user.email "hopefor@gmail.com"
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor "mate -w"    # 设置Editor使用textmate
git config -l # 列举所有配置
</code></pre>

<p>用户的git配置文件<code>~/.gitconfig</code></p>

<!--more-->


<h2>Git常用命令</h2>

<p>查看、添加、提交、删除、找回，重置修改文件</p>

<pre><code>git help &lt;command&gt;  # 显示command的help
git show            # 显示某次提交的内容
git show $id

git co  -- &lt;file&gt;   # 抛弃工作区修改
git co  .           # 抛弃工作区修改

git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区
git add .           # 将所有修改过的工作文件提交暂存区

git rm &lt;file&gt;          # 从版本库中删除文件
git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件

git reset &lt;file&gt;    # 从暂存区恢复到工作文件
git reset -- .      # 从暂存区恢复到工作文件
git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci &lt;file&gt;
git ci .
git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
git ci -am "some comments"
git ci --amend      # 修改最后一次提交记录

git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
git revert HEAD     # 恢复最后一次提交的状态
</code></pre>

<p>查看文件diff</p>

<pre><code>git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &lt;$id1&gt; &lt;$id2&gt;          # 比较两次提交之间的差异
git diff &lt;branch1&gt;..&lt;branch2&gt;   # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
</code></pre>

<p>查看提交记录</p>

<pre><code>git log
git log &lt;file&gt;      # 查看该文件每次提交记录
git log -p &lt;file&gt;   # 查看每次详细修改内容的diff
git log -p -2       # 查看最近两次详细修改内容的diff
git log --stat      # 查看提交统计信息
</code></pre>

<h2>Git 本地分支管理</h2>

<p>查看、切换、创建和删除分支</p>

<pre><code>git br -r           # 查看远程分支
git br &lt;new_branch&gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支

git co &lt;branch&gt;        # 切换到某个分支
git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去
git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch

git co $id                  # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支

git br -d &lt;branch&gt;  # 删除某个分支
git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
</code></pre>

<p>分支合并和rebase</p>

<pre><code>git merge &lt;branch&gt;               # 将branch分支合并到当前分支
git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：
git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;
</code></pre>

<h2>Git补丁管理(方便在多台机器上开发同步时用)</h2>

<pre><code>git diff &gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
</code></pre>

<h2>Git暂存管理</h2>

<pre><code>git stash                        # 暂存
git stash list                   # 列所有stash
git stash apply                  # 恢复暂存的内容
git stash drop                   # 删除暂存区
</code></pre>

<h2>Git远程分支管理</h2>

<pre><code>git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上

git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &lt;local_branch&gt;   # 创建远程分支，origin是远程仓库名
git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支
git push origin :&lt;remote_branch&gt; # 先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支
</code></pre>

<h2>Git远程仓库管理</h2>

<pre><code>git remote -v                    # 查看远程服务器地址和仓库名称
git remote show origin           # 查看远程服务器仓库状态
git remote add origin git@github:username/repositories.git         # 添加远程仓库地址
git remote set-url origin git@github.com:username/repositories.git # 设置远程仓库地址(用于修改远程仓库地址)
git remote rm &lt;repository&gt;       # 删除远程仓库
</code></pre>

<p>创建远程仓库</p>

<pre><code>git clone --bare repositories repositories.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~        # 将纯仓库上传到服务器上

mkdir repositories.git &amp;&amp; cd repositories.git &amp;&amp; git --bare init  # 在服务器创建纯仓库
git remote add origin git@github.com:username/repositories.git    # 设置远程仓库地址
git push -u origin master   # 客户端首次提交
git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master  # 设置远程仓库的HEAD指向master分支
</code></pre>

<p>也可以命令设置跟踪远程库和本地库</p>

<pre><code>git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
</code></pre>

<h2>Github新建仓库，本地提交</h2>

<p>建立新工程（例：ltaaa），提交到远程仓库</p>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:qlqsh/ltaaa.git
git push -u origin master
</code></pre>

<p>提交本地工程到远程仓库</p>

<pre><code>git remote add origin git@github.com:qlqsh/ltaaa.git
git push -u origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hpple 使用]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/hpple-shi-yong/"/>
    <updated>2015-09-11T23:59:48+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/hpple-shi-yong</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;TFHpple.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSData</span>  <span class="o">*</span><span class="n">data</span>      <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithContentsOfFile</span><span class="p">:</span><span class="s">@&quot;index.html&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">TFHpple</span> <span class="o">*</span><span class="n">doc</span>       <span class="o">=</span> <span class="p">[[</span><span class="n">TFHpple</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithHTMLData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">elements</span>  <span class="o">=</span> <span class="p">[</span><span class="n">doc</span> <span class="nl">search</span><span class="p">:</span><span class="s">@&quot;//a[@class=&#39;sponsor&#39;]&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">TFHppleElement</span> <span class="o">*</span><span class="n">element</span> <span class="o">=</span> <span class="p">[</span><span class="n">elements</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="n">raw</span><span class="p">];</span>                        <span class="c1">// 未处理内容</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="n">text</span><span class="p">];</span>                       <span class="c1">// The text inside the HTML element (the content of the first text node)</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="n">tagName</span><span class="p">];</span>                    <span class="c1">// &quot;a&quot;</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="n">attributes</span><span class="p">];</span>                 <span class="c1">// NSDictionary of href, class, id, etc.</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;href&quot;</span><span class="p">];</span>       <span class="c1">// Easy access to single attribute</span>
</span><span class='line'><span class="p">[</span><span class="n">e</span> <span class="nl">firstChildWithTagName</span><span class="p">:</span><span class="s">@&quot;b&quot;</span><span class="p">];</span> <span class="c1">// The first &quot;b&quot; child node</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>遇到的一些问题</h2>

<h4>非UTF-8页面</h4>

<p>1、编码转换。网页编码（比如：gb2312）转换为utf8编码。</p>

<p>2、把其中的</p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312"&gt;
</code></pre>

<p>替换为</p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf8"&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS笔记（1）：pushViewController、presentViewController 简单区分]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/iosbi-ji-(1):pushviewcontroller,-presentviewcontroller-jian-dan-qu-fen/"/>
    <updated>2015-09-11T23:51:51+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/iosbi-ji-(1):pushviewcontroller,-presentviewcontroller-jian-dan-qu-fen</id>
    <content type="html"><![CDATA[<h2>pushViewController</h2>

<p>一般在<code>UINavigationController</code>的时候用，</p>

<pre><code>[self.navigationController pushViewController:viewController animated:YES];
</code></pre>

<!--more-->


<p>返回之前的视图是：</p>

<pre><code>[self.navigationController popViewControllerAnimated:YES];
</code></pre>

<blockquote><p><code>push</code>以后会在<code>navigation</code>的<code>left bar</code>自动添加<code>back</code>按钮，它的响应方法就是返回。所以一般不需要写返回方法，点<code>back</code>按钮即可。</p></blockquote>

<h2>presentViewController</h2>

<p>其它时候使用<code>presentViewController</code>，</p>

<pre><code>[self presentViewController:viewController animated:YES completion:nil];
</code></pre>

<p>返回之前的视图是：</p>

<pre><code>[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<h2>附加</h2>

<p>使用<code>presentViewController</code>，从A->B->C，从C直接返回A。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// C</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">back</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">dismissViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>    <span class="c1">// 注意一定是NO！  </span>
</span><span class='line'>  <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">postNotificationName</span><span class="p">:</span><span class="s">@&quot;backback&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// B</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">back</span><span class="p">)</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;backback&quot;</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">back</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">dismissViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextMate2 简单笔记]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/textmate2-jian-dan-bi-ji/"/>
    <updated>2015-09-11T23:45:35+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/textmate2-jian-dan-bi-ji</id>
    <content type="html"><![CDATA[<h2>Bundle目录</h2>

<p>官方博客上说，TM2的Bundle目录是</p>

<blockquote><p>~/Library/Application Support/Avian/Pristine Copy/Bundles/</p></blockquote>

<p>令人困惑的是，以下目录也可用</p>

<blockquote><p>~/Library/Application Support/Avian/Bundles/</p></blockquote>

<p>TextMate默认带的那些Bundles都放在以下目录中：</p>

<blockquote><p>~/Library/Application Support/TextMate/Managed/Bundles</p></blockquote>

<p>额外的Bundle</p>

<h2>全局设置文件</h2>

<p>TM2可以自定一个全局设置，保存在<code>~/.tm_properties</code>文件中。</p>

<p>可参考：<a href="https://gist.github.com/1478685">https://gist.github.com/1478685</a></p>

<blockquote><p>奇怪，死活找不到.tm_properties文件，正式版出来再看看文档吧。</p></blockquote>

<h2>TextMate2查找替换</h2>

<p>基本不用调出对话框的。</p>

<p><code>ctrl+s</code> 增量查找</p>

<p><code>cmd+e</code> 将选中内容变成查找目标，<code>cmd+g</code>就到下一个了。常用的组合是<code>ctrl+w</code>（选中当前词） –> <code>cmd+e</code> –> <code>cmd+g</code></p>

<p><code>cmd+opt+f</code> 同时编辑文件内所有匹配查找目标的内容</p>

<p>另外全工程替换效果也很赞。可以进一步编辑工程下面的<code>.tm_properties</code>，设置工程内查找可以忽略哪些文件。例如忽略<code>vendor</code>目录，<code>.bundle</code>文件，<code>.sfd</code>文件和压缩的js可以这么写：</p>

<pre><code>exclude = "{$exclude,vendor/**/*,*.bundle,*.sfd,*.sfd~,*.a,*.min.js}"
</code></pre>

<p>键盘操作限定搜索范围在一个文件夹内的方法：<code>cmd+opt+tab</code>把焦点切换到目录中选中文件夹 （焦点在目录时可以连续敲入文件的前几个字母快速跳到那个文件上，就和在<code>finder</code>中差不多），然后就可以<code>cmd+shift+f</code>了。</p>

<h2>TextMate2建立新Bundles</h2>

<p><code>Bundles</code> –> <code>Edit Bundles</code>，然后<code>cmd+N</code>。</p>

<h2>参考文献：</h2>

<p><a href="http://ruby-china.org/topics/5916">http://ruby-china.org/topics/5916</a></p>

<p><a href="http://xiaolai.github.io/alpha/notes/TextMate2.html">http://xiaolai.github.io/alpha/notes/TextMate2.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 第三方类库]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/ios-di-san-fang-lei-ku/"/>
    <updated>2015-09-11T23:41:19+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/ios-di-san-fang-lei-ku</id>
    <content type="html"><![CDATA[<h2>日历开源类库</h2>

<p><a href="https://github.com/devinross/tapkulibrary">tapkulibrary</a>封装了很多类，日历只是其中一部分，和iOS自带UI一样。更新频繁。</p>

<p><a href="https://github.com/klazuka/Kal">Kal</a>也是标准日历控件。更新不频繁。</p>

<!--more-->


<p><a href="https://github.com/muhku/calendar-ui">calendar-ui</a>日、周表现形式的日历控件。正常更新。</p>

<p><a href="https://github.com/damiandawber/DDCalendarView">DDCalendarView</a>简单日历控件。很久没更新了。</p>

<p><a href="https://github.com/shaokun/SimpleCalendarView">SimpleCalendarView</a>简单日历控件，很久没更新了。</p>

<p><a href="https://github.com/voidparadox/Si-Calendar">Si-Calendar</a>标准日历控件，正常更新。</p>

<p><a href="http://code.google.com/p/iphonecal/">iphonecal</a>中文日历控件，很难看。</p>

<p><a href="https://github.com/jaykz52/CKCalendar">CKCalendar</a>轻松定制日历控件，比较好看，更新不频繁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 插件]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/xcode-cha-jian/"/>
    <updated>2015-09-11T23:23:11+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/xcode-cha-jian</id>
    <content type="html"><![CDATA[<h5>1、<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a></h5>

<p>工程依赖管理。</p>

<!--more-->


<h5>2、<a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocument-Xcode</a></h5>

<p>规范化注释插件，输入<code>///</code>触发，然后就是填写剩余的信息了。</p>

<h5>3、<a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a></h5>

<p>使用<code>[UIImage/NSImage imageNamed:]</code>的时候弹出图片选择列表。</p>

<h5>4、<a href="https://github.com/holtwick/HOStringSense-for-Xcode">HOStringSense-for-Xcode</a></h5>

<p>可以把<code>NSLog</code>中的字符串，显示为正常输出样式。同时也可以用于实际的正则表达式显示。</p>

<h5>5、<a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode">BBUncrustifyPlugin-Xcode</a></h5>

<p>用于 Objective-C 代码格式化。</p>

<h5>6、<a href="https://github.com/omz/ColorSense-for-Xcode">ColorSense-for-Xcode</a></h5>

<p>可视化颜色选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods做iOS程序包依赖管理]]></title>
    <link href="http://qlqsh.github.io/blog/2015/09/11/shi-yong-cocoapodszuo-ioscheng-xu-bao-yi-lai-guan-li/"/>
    <updated>2015-09-11T22:28:03+08:00</updated>
    <id>http://qlqsh.github.io/blog/2015/09/11/shi-yong-cocoapodszuo-ioscheng-xu-bao-yi-lai-guan-li</id>
    <content type="html"><![CDATA[<p>由于ruby、CocoaPods被墙的关系，可能会造成一些乱七八糟的错误。最好有个稳定的VPN。</p>

<!--more-->


<h2>CocoaPods安装和使用</h2>

<h4>安装</h4>

<p>mac下安装很简单。</p>

<pre><code>sudo gem install cocoapods
</code></pre>

<blockquote><p>注意，需要安装Command Line Tools。</p></blockquote>

<h4>使用</h4>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<pre><code>platform :ios
pod 'JSONKit',       '~&gt; 1.4'
pod 'Reachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></pre>

<p>然后将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<pre><code>cd "your project home"
pod install
</code></pre>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<blockquote><ol>
<li>使用CocoaPods生成的<code>.xcworkspace</code>文件来打开工程，而不是以前的<code>.xcodeproj</code>文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod install</code>命令。</li>
</ol>
</blockquote>

<h4>查找第三方库</h4>

<p>可以使用<code>pod search name</code>命令查找可用类库。比如：</p>

<pre><code>pod search json
</code></pre>

<h2>参考文献：</h2>

<p><a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/</a></p>

<p><a href="http://www.cnblogs.com/wayne23/p/3912882.html">http://www.cnblogs.com/wayne23/p/3912882.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress附加功能]]></title>
    <link href="http://qlqsh.github.io/blog/2013/05/23/octopressfu-jia-gong-neng/"/>
    <updated>2013-05-23T01:48:00+08:00</updated>
    <id>http://qlqsh.github.io/blog/2013/05/23/octopressfu-jia-gong-neng</id>
    <content type="html"><![CDATA[<h2>评论功能</h2>

<p>Octopress本身默认支持disqus，打开<code>_config.yml</code>，找到disqus相关配置项，修改即可：</p>

<pre><code>disqus_short_name: your_disqus_short_name
disqus_show_comment_count: true
</code></pre>

<p>不过要想使用还需要一个<a href="http://www.disqus.com">disqus</a>帐号。</p>

<p>我觉得没什么大用处，不加入评论功能了。</p>

<!--more-->


<h2>分类功能</h2>

<p>保存以下代码到plugins/category_list_tag.rb：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>        <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside。</p>

<p>复制以下代码到source/_includes/asides/category_list.html。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% category_list %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置侧边栏需要修改_config.yml文件，修改其default_asides项：</p>

<pre><code>default_asides: [asides/category_list.html]
</code></pre>

<p>注意，不支持中文。要想显示<code>{% category_list %}</code>，需要在<code>{% category_list %}</code>前后加入<code>raw</code>和<code>endraw</code>。</p>

<h2>一些简单配置</h2>

<ul>
<li>在<code>_config.yml</code>中，把Read on改为“继续阅读”。</li>
<li>在右侧加入<code>Github repositories</code>，在<code>_config.yml</code>中，把<code>github_user</code>设为Github用户名。</li>
<li>关闭Tweet，在<code>_config.yml</code>中，把<code>twitter_tweet_button</code>设为<code>false</code>。</li>
</ul>


<h2>解决"WARN Could Not Determine Content-lenth of Response Boby"错误</h2>

<p>在使用<code>Rake preview</code>时，观察到会出现下面错误</p>

<blockquote><p>WARN Could not determine content-length of response body. Set content-length of the response or set Response#chunked = true</p></blockquote>

<p>查询了一番，终于找到解决方案，记录一下！</p>

<pre><code>sudo vim ~/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/webrick/httpresponse.rb
</code></pre>

<p>找到下面代码</p>

<pre><code>if chunked? || @header['content-length']
</code></pre>

<p>替换为</p>

<pre><code>if chunked? || @header['content-length'] || @status == 304 || @status == 204
</code></pre>

<p>重启<code>rake preview</code></p>

<p>参考文献：</p>

<p><a href="http://www.yanjiuyanjiu.com/blog/20130402/">http://www.yanjiuyanjiu.com/blog/20130402/</a></p>

<h2>遇到的问题</h2>

<p>使用Gist的时候，行号不能对齐，很不美观。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress建立博客]]></title>
    <link href="http://qlqsh.github.io/blog/2013/05/22/shi-yong-octopressjian-li-bo-ke/"/>
    <updated>2013-05-22T13:38:00+08:00</updated>
    <id>http://qlqsh.github.io/blog/2013/05/22/shi-yong-octopressjian-li-bo-ke</id>
    <content type="html"><![CDATA[<p>由于墙的关系，可能会造成一些乱七八糟的错误。最好有个稳定的VPN。</p>

<p>这次安装是最简单，也是最舒心，中途没有碰到什么问题，非常顺。</p>

<!--more-->


<h2>安装git</h2>

<ol>
<li><p>下载git安装程序，安装。</p></li>
<li><p>注册Github帐号，建立Repository。</p>

<blockquote><p>必须使用username.github.com建立仓库名</p></blockquote></li>
<li><p>建立SSH Keys，添加到GitHub的SSH公钥管理中。</p>

<p>这里我使用单帐户。</p>

<pre><code>ssh-keygen                      # 建立默认公钥/私钥对文件
cat ~/.ssh/id_rsa.pub | pbcopy  # 拷贝公钥到剪贴板
</code></pre>

<p>然后粘贴到GitHub的SSH公钥管理中。多GitHub账户情况，处理方式略有不同。</p></li>
<li><p>测试。</p>

<pre><code>ssh -T git@github.com
</code></pre>

<p>会返回一条欢迎信息。</p></li>
<li><p>设置个人信息。</p>

<pre><code>git config --global user.name "用户名"
git config --global user.email "邮箱"
</code></pre></li>
</ol>


<p>参考文献：</p>

<p><a href="http://www.worldhello.net/gotgithub/02-join-github/010-account-setup.html">http://www.worldhello.net/gotgithub/02-join-github/010-account-setup.html</a></p>

<h2>安装rvm</h2>

<p>这里使用单用户模式。</p>

<pre><code>bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code></pre>

<p>安装方式有两种（单用户模式、多用户模式），区别是是否拥有root权限。</p>

<blockquote><p>单用户路径    ~/.rvm/</p>

<p>多用户路径    /usr/local/rvm</p></blockquote>

<p>单用户安装方式：</p>

<pre><code>bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code></pre>

<p>多用户安装方式：</p>

<pre><code>sudo bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code></pre>

<p>参考文献：</p>

<p><a href="http://kingplesk.org/2011/11/mac-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85ruby-rvm/">http://kingplesk.org/2011/11/mac-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85ruby-rvm/</a></p>

<p><a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a></p>

<h2>安装ruby</h2>

<pre><code>sudo rvm install 1.9.3  # 安装
rvm use 1.9.3           # 切换ruby版本
ruby -v                 # 确认
rvm use 1.9.3 --default # 设定ruby默认版本
</code></pre>

<p>参考文献：</p>

<p><a href="http://ruby-china.org/topics/2822">http://ruby-china.org/topics/2822</a></p>

<h2>安装Octopress</h2>

<pre><code>git clone git://github.com/imathis/octopress.git liuming.me # 拷贝Octopress到本地文件夹
cd liuming.me                                               # 使用的RVM的话，回答“yes”就行
</code></pre>

<p>提示了一大段，选yes，接着下面3个命令就OK了。</p>

<pre><code>sudo gem install bundler
bundle install              # 包安装
rake install                # Octopress默认主题安装
</code></pre>

<h2>部署到Github Pages</h2>

<pre><code>rake setup_github_pages # 配置Github项目地址，接下来提示输入URL
rake generate           # 生成静态文件
rake deploy             # 部署到Github
</code></pre>

<p>备份source文件夹到github，这样就有了文章md源文件的版本管理。</p>

<pre><code>git add .
git commit -m "第一次提交"
git push origin source
</code></pre>

<p>Octopress常用命令：</p>

<pre><code>rake new_post["File Name"]  # 建立新文章，可以使用中文，但不能带标点
rake preview                # 站点预览，动态生成，http://127.0.0.1:4000
rake generate               # 生成静态文件
rake deploy                 # 部署到Github
</code></pre>

<p>注意，如果以后要从另一个电脑pull源码来新电脑，用如下命令：</p>

<pre><code>cd your_local_octopress_directory
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<p>只要记住<code>your_local_octopress_directory</code>对应的的<code>remote source branch</code>，而<code>_deploy</code>对应的是<code>remote master branch</code>即可。</p>

<p>如果你是和别人合作博客，或者自己同时在好几个电脑上写博客，每次开始之前，<code>git pull origin source</code>获得最新的文件，<code>rake generate</code>生成新的页面。</p>

<p>参考文献：</p>

<p><a href="http://blog.csdn.net/janronehoo/article/details/8509356">http://blog.csdn.net/janronehoo/article/details/8509356</a></p>

<p><a href="http://blog.tinyxd.me/blog/2012/05/23/octopressan-zhuang-bi-ji/">http://blog.tinyxd.me/blog/2012/05/23/octopressan-zhuang-bi-ji/</a></p>

<p><a href="http://fancyoung.com/blog/host-to-github/">http://fancyoung.com/blog/host-to-github/</a></p>

<h2>安装中碰到的问题</h2>

<ol>
<li><p>有可能碰到ruby编译问题。必须安装Xcode，如果是4.3以后版本，必须安装Command Line Tools。</p></li>
<li><p><code>rvm use 1.9.3 --default</code>在mac下可能不管用，每次重启Terminal都会自动跳回1.8.7。可以考虑用这个命令：
<code>sudo rvm alias create default 1.9.3</code>。</p></li>
<li><p>如果报错，可以考虑加<code>sudo</code>试试。</p></li>
</ol>


<h2>其它参考资料</h2>

<p>1、Octopress搭建流程，感觉比我的更易懂。<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/</a></p>
]]></content>
  </entry>
  
</feed>
